{"version":3,"sources":["app/components/AuthProviderButton.tsx","shims/firebase-init.ts","app/components/Hero.tsx","app/auth-providers/Facebook.tsx","app/auth-providers/Google.tsx","shims/google-signin-web.ts","app/auth-providers/Apple.tsx","index.js","shims/firebase-auth-web.ts","app/components/AppSettings.ts","app/signed-in/Stack.tsx","shims/firebase-analytics-web.ts","app/translations/index.ts","app/translations/en.ts","app/translations/es.ts","app/theme.ts","luna-app/App.tsx","app/util/helpers.ts","app/signed-in/Profile.tsx","app/components/AuthProvider.tsx","shims/react-native-fbsdk-next-web.ts","shims/react-native-apple-authentication-web.ts","app/signed-in/Settings.tsx","app/signed-out/Stack.tsx","app/signed-out/CreateAccount.tsx","app/signed-out/ForgotPassword.tsx","app/signed-out/PhoneSignIn.tsx","app/auth-providers/Phone.tsx","app/signed-out/SignIn.tsx","app/auth-providers/EmailPassword.tsx","utils/icons.js","app/App.tsx"],"names":["getSocialColor","type","style","onPress","loading","children","Button","styles","button","icon","name","color","size","mode","dark","StyleSheet","create","marginVertical","width","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","absolute","flex","position","top","right","bottom","left","fadedImage","backgroundColor","image","height","source","uri","PROVIDER_ID","useState","setLoading","user","useContext","UserContext","getProviderButtonTitle","isOnlyProvider","title","variant","unlink","reload","LoginManager","logInWithPermissions","isCancelled","Alert","alert","AccessToken","getCurrentAccessToken","result","Error","accessToken","credential","auth","FacebookAuthProvider","linkWithCredential","signInWithCredential","message","GoogleSignin","hasPlayServices","signIn","getTokens","idToken","GoogleAuthProvider","error","code","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","console","info","useEffect","configure","scopes","webClientId","require","GoogleSigninImpl","log","options","JSON","stringify","SIGN_IN_REQUIRED","appleButton","margin","Platform","OS","appleAuth","performRequest","requestedOperation","AppleRequestOperation","LOGIN","requestedScopes","AppleRequestScope","EMAIL","FULL_NAME","appleAuthRequestResponse","identityToken","nonce","AppleAuthProvider","AppleButton","cornerRadius","buttonStyle","Style","WHITE","buttonType","Type","SIGN_IN","handleApple","AppRegistry","registerComponent","appName","App","runApplication","rootTag","document","getElementById","fallbackLanguageLocale","languageTag","isRTL","languageLocale","setLanguageLocale","listening","setListening","colorScheme","configureI18n","useCallback","i18n","translations","locale","fallbacks","defaultLocale","substring","languageCode","setLanguageCode","missingTranslation","param","otherParam","logEvent","i18n_key","translation","default","listener","bestAvailable","findBestAvailableLanguage","Object","keys","I18nManager","forceRTL","addEventListener","t","key","config","currentTheme","defaultTheme","darkTheme","Stack","createStackNavigator","TopTabs","createMaterialTopTabNavigator","ProfileStack","appSettings","useAppSettings","Navigator","Screen","component","Profile","headerShown","Settings","insets","useSafeAreaInsets","screenOptions","tabBarStyle","paddingTop","GettingStarted","analytics","en","english","es","spanish","forgotPassword","createAnAccount","phoneSignIn","phoneSignInTitle","gettingStarted","userInfo","settings","createAccountError","createAccountPasswordsDifferent","createAccountInstructions","emailLabel","passwordLabel","createAccountPasswordConfirmLabel","passwordsDoNotMatch","createAccountCreating","createAccountCreate","forgotPasswordInstructions","forgotPasswordLabel","forgotPasswordError","forgotPasswordSucess","forgotPasswordSending","forgotPasswordSend","phoneAuthError","phoneVerificationError","phoneVerificationCode","phoneVerificationConfirm","phoneVerificationCountryInstructions","phoneVerificationNumberInstructions","phoneVerificationNumberLabel","phoneVerificationNumberSubmit","signInError","signInSigningIn","signInSignIn","profileLastSignIn","userUpdateError","userPasswordChanged","userEmailVerify","userEmailVerification","userEmailVerificationInstructions1","userEmailVerificationInstructions2","userEmailVerificationBanner","userDisplayLabel","userNameDisplayLabel","userNameDisplayInstructions","userNameDisplaySave","userPasswordUpdateLabel","userPasswordInstructions","userPasswordCurrent","userPasswordNew","userPasswordConfirm","userPasswordUpdate","userSignOut","forgotPasswordSuccess","PaperDarkTheme","NavigationDarkTheme","colors","primary","PaperDefaultTheme","NavigationDefaultTheme","Section","isDarkMode","sectionContainer","sectionTitle","Colors","white","black","sectionDescription","light","backgroundStyle","darker","lighter","contentInsetAdjustmentBehavior","Header","highlight","ReloadInstructions","DebugInstructions","LearnMoreLinks","Tab","TopTabNavigator","linkTo","useLinkTo","accentColor","ligher","primaryColor","tabBarLabelStyle","tabBarIndicatorStyle","initialRouteName","detailsContainer","alignContent","justifyContent","alignItems","marginTop","paddingHorizontal","fontSize","fontWeight","SafeAreaProvider","NavigationContainer","linking","prefixes","screens","Details","Linking","Home","documentTitle","formatter","route","appJson","displayName","providerID","providers","getProviders","isProvider","includes","length","providerTitles","providerNames","errorHandler","LINK","UNLINK","providerData","map","provider","providerId","container","content","profile","paddingVertical","avatar","borderWidth","elevation","flexDirection","padding","fab","center","theme","useTheme","navigation","useNavigation","photoURL","Avatar","Image","Text","label","toUpperCase","email","borderColor","background","Headline","emailVerified","Title","phoneNumber","Subheading","metadata","lastSignInTime","Caption","format","surface","active","FAB","navigate","providerMap","password","facebook","google","phone","inactive","opacity","onSurface","maxWidth","input","alignSelf","divider","currentUser","setError","signingOut","setSigningOut","savingName","setSavingName","setDisplayName","help","setHelp","savingPassword","setSavingPassword","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordSuccess","setPasswordSuccess","signOut","updateProfile","signInWithEmailAndPassword","updatePassword","Banner","visible","actions","sendEmailVerification","then","Paragraph","TextInput","value","onChangeText","autoComplete","disabled","Divider","secureTextEntry","HelperText","SignIn","CreateAccount","ForgotPassword","PhoneSignIn","setEmail","setPassword","confirm","setConfirm","createUserWithEmailAndPassword","handleAuthError","keyboardType","autoCapitalize","autoCorrect","autoFocus","handleCreate","success","setSuccess","sendPasswordResetEmail","attemptReset","backdrop","phoneCountry","borderRadius","phoneCountryCode","marginLeft","paragraph","marginBottom","picker","submit","confirmationRef","useRef","number","setNumber","verification","setVerification","countryCode","setCountryCode","country","setCountry","setVisible","signInWithPhoneNumber","current","bind","Fragment","containerButtonStyle","primaryColorVariant","onBackgroundTextColor","excludeCountries","onSelect","newCountry","cca2","callingCode","withFlag","withCountryNameButton","withCallingCode","preferredCountries","modalProps","onClose","onOpen","text","parsed","AsYouType","parsePhoneNumberFromString","isValid","hairlineWidth","signinButton","form","textAlign","maskTheme","attemptSignIn","IconsCSS","AntDesign_ttf","Entypo_ttf","EvilIcons_ttf","Feather_ttf","FontAwesome_ttf","Fontisto_ttf","Foundation_ttf","Ionicons_ttf","MaterialIcons_ttf","MaterialCommunityIcons_ttf","Octicons_ttf","Zocial_ttf","SimpleLineIcons_ttf","createElement","styleSheet","cssText","appendChild","createTextNode","head","createContext","loadingContainer","padded","initializing","setInitializing","listenUser","setListenUser","setUser","authListener","onAuthStateChanged","userListener","onIdTokenChanged","waiting","setTimeout","ActivityIndicator","accent","Provider","UserProfile","home"],"mappings":"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","file":"static/js/main.6854379f.chunk.js","sourcesContent":["import {StyleSheet, ViewStyle} from 'react-native';\nimport {Button} from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\ntype SocialType = 'facebook' | 'google' | 'apple' | 'phone';\n\ninterface Props {\n  style?: ViewStyle;\n  type: SocialType;\n  onPress: () => void;\n  loading?: boolean;\n  children: string;\n}\n\nfunction getSocialColor(type: SocialType): string {\n  switch (type) {\n    case 'facebook':\n      return '#4267B2';\n    case 'google':\n      return '#F96458';\n    case 'apple':\n      return '#000000';\n    case 'phone':\n      return '#b24292';\n  }\n}\n\nfunction ProviderButton({\n  style,\n  type,\n  onPress,\n  loading,\n  children,\n}: Props): JSX.Element {\n  return (\n    <Button\n      style={[styles.button, style]}\n      icon={() => <Icon name={type} color=\"#fff\" size={17} />}\n      mode=\"contained\"\n      color={getSocialColor(type)}\n      dark\n      loading={loading}\n      onPress={() => (loading ? null : onPress())}>\n      {children}\n    </Button>\n  );\n}\n\nexport default ProviderButton;\n\nconst styles = StyleSheet.create({\n  button: {\n    marginVertical: 5,\n    width: 300,\n  },\n});\n","// Native builds get the config from google-services.json GoogleService-Info.plist\nimport firebase from 'firebase/compat/app';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAT1mBDevSlggcqLDNnEAxCmj1KnSuMTtU',\n  authDomain: 'rnfirebase-auth-template.firebaseapp.com',\n  projectId: 'rnfirebase-auth-template',\n  storageBucket: 'rnfirebase-auth-template.appspot.com',\n  messagingSenderId: '725336377227',\n  appId: '1:725336377227:web:d7c6e3fb3d23f9d506118e',\n  measurementId: 'G-9BECK74F26',\n};\n\nconst initializeApp = (): void => {\n  firebase.initializeApp(firebaseConfig);\n};\n\nexport default initializeApp;\n","import {Image, SafeAreaView, StyleSheet, View, ViewStyle} from 'react-native';\n\ninterface Props {\n  children?: React.ReactNode | React.ReactNode[];\n  height: number;\n  image?: string;\n  style?: ViewStyle;\n}\n\nfunction Hero({image, height, children, style}: Props): JSX.Element {\n  return (\n    <View style={[style, {height}]}>\n      {!!image && (\n        <Image\n          style={[styles.absolute, styles.image]}\n          source={{\n            uri: image,\n          }}\n        />\n      )}\n      <SafeAreaView style={[styles.absolute, styles.fadedImage]}>\n        {children}\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  absolute: {\n    flex: 1,\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n  fadedImage: {\n    backgroundColor: 'rgba(0,0,0,0.7)',\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n  },\n});\n\nexport default Hero;\n","import auth from '@react-native-firebase/auth';\nimport {useContext, useState} from 'react';\nimport {Alert} from 'react-native';\nimport {AccessToken, LoginManager} from 'react-native-fbsdk-next';\nimport {UserContext} from '../App';\nimport ProviderButton from '../components/AuthProviderButton';\nimport {getProviderButtonTitle} from '../util/helpers';\n\nconst PROVIDER_ID = 'facebook.com';\n\nfunction Facebook(): JSX.Element | null {\n  const [loading, setLoading] = useState(false);\n  const user = useContext(UserContext);\n\n  const {isOnlyProvider, title, variant} = getProviderButtonTitle(\n    user,\n    PROVIDER_ID,\n  );\n\n  async function handleFacebook() {\n    if (!loading) {\n      setLoading(true);\n\n      try {\n        if (variant === 'UNLINK' && user) {\n          await user.unlink(PROVIDER_ID);\n          await user.reload();\n        } else {\n          const {isCancelled} = await LoginManager.logInWithPermissions([\n            'public_profile',\n            'email',\n          ]);\n\n          if (isCancelled) {\n            Alert.alert('Facebook Auth Canceled');\n          } else {\n            const result = await AccessToken.getCurrentAccessToken();\n            if (!result) {\n              throw new Error(\n                'No Access Token was returned from Facebook SDK.',\n              );\n            }\n\n            const {accessToken} = result;\n\n            const credential =\n              auth.FacebookAuthProvider.credential(accessToken);\n\n            if (variant === 'LINK' && user) {\n              await user.linkWithCredential(credential);\n              await user.reload();\n            } else if (variant === 'SIGN_IN') {\n              await auth().signInWithCredential(credential);\n            }\n          }\n        }\n      } catch (error) {\n        setLoading(false);\n        Alert.alert('Facebook Auth Error', (error as Error).message);\n      }\n    }\n  }\n\n  if (isOnlyProvider) {\n    return null;\n  }\n\n  return (\n    <ProviderButton loading={loading} type=\"facebook\" onPress={handleFacebook}>\n      {title}\n    </ProviderButton>\n  );\n}\n\nexport default Facebook;\n","import auth from '@react-native-firebase/auth';\nimport {useContext, useEffect, useState} from 'react';\nimport {Alert} from 'react-native';\nimport {FirebaseError} from '@firebase/util';\nimport {\n  GoogleSignin,\n  statusCodes,\n} from '@react-native-google-signin/google-signin';\nimport {UserContext} from '../App';\nimport ProviderButton from '../components/AuthProviderButton';\nimport {getProviderButtonTitle} from '../util/helpers';\n\nconst PROVIDER_ID = 'google.com';\n\nfunction Google(): JSX.Element | null {\n  const [loading, setLoading] = useState(false);\n  const user = useContext(UserContext);\n  const {isOnlyProvider, title, variant} = getProviderButtonTitle(\n    user,\n    PROVIDER_ID,\n  );\n\n  async function handleGoogle() {\n    if (!loading) {\n      setLoading(true);\n\n      try {\n        await GoogleSignin.hasPlayServices();\n\n        if (variant === 'UNLINK' && user) {\n          await user.unlink(PROVIDER_ID);\n          await user.reload();\n        } else {\n          await GoogleSignin.signIn();\n          const {accessToken, idToken} = await GoogleSignin.getTokens();\n          const credential = auth.GoogleAuthProvider.credential(\n            idToken,\n            accessToken,\n          );\n\n          if (variant === 'LINK' && user) {\n            await user.linkWithCredential(credential);\n            await user.reload();\n          } else if (variant === 'SIGN_IN') {\n            await auth().signInWithCredential(credential);\n          }\n        }\n      } catch (e) {\n        setLoading(false);\n        const error = e as FirebaseError;\n        switch (error.code) {\n          case statusCodes.SIGN_IN_CANCELLED:\n          case '-1':\n            return Alert.alert('Google Auth Canceled');\n          case statusCodes.IN_PROGRESS:\n            return Alert.alert('Google Auth Already In Progress');\n          case statusCodes.PLAY_SERVICES_NOT_AVAILABLE:\n            return Alert.alert('Google Auth Requires Play Services');\n          default:\n            switch (error.message) {\n              case 'DEVELOPER_ERROR':\n                console.info(\n                  'Developer error during Google Auth, check: ' +\n                    'https://github.com/react-native-google-signin/google-signin/blob/f21dd95a090f4f529748473e20515d6fc66db6bb/example/README.md#developer_error-or-code-10-on-android',\n                );\n                return Alert.alert(\n                  'Google Auth Error',\n                  'Google Auth has not been configured correctly for this app by the developer. More info is available in the console output.',\n                );\n              default:\n                return Alert.alert('Google Auth Error', error.message);\n            }\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    GoogleSignin.configure({\n      scopes: ['profile', 'email'],\n      // TODO: Get your web client id from firebase console --> Project Settings --> Auth --> Google Sign-in\n      webClientId: require('../../config.json').webClientId,\n    });\n  }, []);\n\n  if (isOnlyProvider) {\n    return null;\n  }\n\n  return (\n    <ProviderButton loading={loading} onPress={handleGoogle} type=\"google\">\n      {title}\n    </ProviderButton>\n  );\n}\n\nexport default Google;\n","// import type {\n//   // AddScopesParams,\n//   SignInParams,\n//   ConfigureParams,\n//   HasPlayServicesParams,\n//   User\n// } from '../../node_modules/@react-native-google-signin/google-signin/src/types';\n\nclass GoogleSigninImpl {\n  constructor() {\n    console.log('GoogleSignin loaded in web mode.');\n  }\n\n  async signIn(): Promise<{}> {\n    console.log('should do a google signin');\n    return {};\n  }\n\n  async hasPlayServices(): Promise<boolean> {\n    console.log('should check play services');\n    return false;\n  }\n\n  async getTokens(): Promise<{idToken: string; accessToken: string}> {\n    return {\n      idToken: 'badidtoken',\n      accessToken: 'badaccesstoken',\n    };\n  }\n\n  configure(options: {}): void {\n    console.log(\n      'should configure google signin with options: ' + JSON.stringify(options),\n    );\n  }\n\n  signOut(): void {\n    console.log('should signout google');\n  }\n}\n\nexport const GoogleSignin = new GoogleSigninImpl();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: 12501, // https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInStatusCodes#public-static-final-int-sign_in_cancelled\n  IN_PROGRESS: 'ASYNC_OP_IN_PROGRESS',\n  PLAY_SERVICES_NOT_AVAILABLE: 'PLAY_SERVICES_NOT_AVAILABLE',\n  SIGN_IN_REQUIRED: 4, // https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#public-static-final-int-sign_in_required\n};\n\nexport {};\n","import {FirebaseError} from '@firebase/util';\nimport auth from '@react-native-firebase/auth';\nimport {useContext, useState} from 'react';\nimport {Alert, Platform, StyleSheet} from 'react-native';\nimport appleAuth, {\n  AppleButton,\n  AppleRequestOperation,\n  AppleRequestScope,\n} from '@invertase/react-native-apple-authentication';\nimport {UserContext} from '../App';\nimport {getProviderButtonTitle} from '../util/helpers';\n\nconst PROVIDER_ID = 'apple.com';\n\nfunction Apple(): JSX.Element | null {\n  const [loading, setLoading] = useState(false);\n  const user = useContext(UserContext);\n\n  if (Platform.OS !== 'ios') {\n    return null;\n  }\n\n  const {isOnlyProvider, variant} = getProviderButtonTitle(user, PROVIDER_ID);\n\n  async function handleApple() {\n    if (!loading) {\n      setLoading(true);\n\n      try {\n        if (variant === 'UNLINK' && user) {\n          await user.unlink(PROVIDER_ID);\n          await user.reload();\n        } else {\n          const appleAuthRequestResponse = await appleAuth.performRequest({\n            requestedOperation: AppleRequestOperation.LOGIN,\n            requestedScopes: [\n              AppleRequestScope.EMAIL,\n              AppleRequestScope.FULL_NAME,\n            ],\n          });\n\n          const {identityToken, nonce} = appleAuthRequestResponse;\n          if (identityToken) {\n            const credential = auth.AppleAuthProvider.credential(\n              identityToken,\n              nonce,\n            );\n\n            if (variant === 'LINK' && user) {\n              await user.linkWithCredential(credential);\n              await user.reload();\n            } else if (variant === 'SIGN_IN') {\n              await auth().signInWithCredential(credential);\n            }\n          } else {\n            Alert.alert(\n              'Apple Auth Error',\n              'Unable to obtain an identity token from Apple.',\n            );\n          }\n        }\n      } catch (e) {\n        setLoading(false);\n        const error = e as FirebaseError;\n        // TODO: handle possible cases\n        if (error.code !== '1001') {\n          Alert.alert('Apple Auth Error', error.message);\n        }\n      }\n    }\n  }\n\n  if (isOnlyProvider) {\n    return null;\n  }\n\n  return (\n    <AppleButton\n      style={styles.appleButton}\n      cornerRadius={5}\n      buttonStyle={AppleButton.Style.WHITE}\n      buttonType={AppleButton.Type.SIGN_IN}\n      onPress={() => handleApple()}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  appleButton: {\n    width: 300,\n    height: 35,\n    margin: 6,\n  },\n});\n\nexport default Apple;\n","/**\n * When compiling for web, it will search for index.js on root/src.\n */\n\nimport {AppRegistry} from 'react-native';\nimport App from './app/App';\nimport {name as appName} from './app.json';\nimport './utils/icons';\n\nAppRegistry.registerComponent(appName, () => App);\nAppRegistry.runApplication(appName, {\n  rootTag: document.getElementById('root'),\n});\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\nimport initializeApp from './firebase-init';\ninitializeApp();\n\nconst auth = firebase.auth;\nexport default auth;\n","import i18n from 'i18n-js';\nimport {useCallback, useEffect, useState} from 'react';\nimport {I18nManager, Platform, useColorScheme} from 'react-native';\nimport {\n  findBestAvailableLanguage,\n  addEventListener,\n} from 'react-native-localize';\nimport analytics from '@react-native-firebase/analytics';\nimport auth from '@react-native-firebase/auth';\nimport {translations} from '../translations';\nimport {darkTheme, defaultTheme} from '../theme';\nimport {Theme as PaperTheme} from 'react-native-paper/lib/typescript/types';\nimport {Theme as NavigationTheme} from '@react-navigation/native';\n\nexport type LanguageLocale = {\n  languageTag: string;\n  isRTL: boolean;\n};\n\nexport const fallbackLanguageLocale: LanguageLocale = {\n  languageTag: 'en',\n  isRTL: false,\n};\n\nexport type AppSettings = {\n  languageLocale: LanguageLocale | null;\n  t: (key: string, config?: any) => string;\n  colorScheme: string;\n  currentTheme: PaperTheme & NavigationTheme;\n};\n\nexport const useAppSettings = (): AppSettings => {\n  const [languageLocale, setLanguageLocale] = useState<LanguageLocale | null>(\n    null,\n  );\n  const [listening, setListening] = useState(false);\n  const colorScheme = useColorScheme();\n\n  const configureI18n = useCallback(languageTag => {\n    i18n.translations = translations;\n    i18n.locale = languageTag;\n    i18n.fallbacks = true;\n    i18n.defaultLocale = fallbackLanguageLocale.languageTag.substring(0, 2);\n    if (Platform.OS === 'web') {\n      auth().languageCode = languageTag;\n    } else {\n      auth().setLanguageCode(languageTag);\n    }\n\n    // Missing translations is a common problem. Log them in analytics for visibility.\n    i18n.missingTranslation = (param: any, otherParam: any) => {\n      console.log(\n        `AppSettings::t - missing translation - received param / otherparam: ${param}`,\n        otherParam,\n      );\n\n      analytics().logEvent('I18N_Not_Translated', {\n        i18n_key: `${languageTag}.${param}`,\n      });\n      let translation = `I18N: ${param}`;\n      if (otherParam && otherParam.default) {\n        translation += ` (${otherParam.default})`;\n      }\n      return translation;\n    };\n  }, []);\n\n  const listener = useCallback(() => {\n    const bestAvailable =\n      findBestAvailableLanguage(Object.keys(translations)) ??\n      fallbackLanguageLocale;\n    setLanguageLocale(bestAvailable);\n    I18nManager.forceRTL(bestAvailable.isRTL);\n    configureI18n(bestAvailable.languageTag);\n  }, [configureI18n]);\n\n  useEffect(() => {\n    listener();\n\n    if (!listening) {\n      addEventListener('change', listener);\n      setListening(true);\n    }\n\n    // return () => {\n    //   removeEventListener('change', listener);\n    //   console.log('AppSettings::useEffect::removed listener');\n    // };\n  }, [listening, listener]);\n\n  return {\n    languageLocale,\n    t: (key: string, config?: any) => i18n.t(key, config),\n    colorScheme: colorScheme ?? 'light',\n    currentTheme: colorScheme === 'light' ? defaultTheme : darkTheme,\n  };\n};\n","import {createMaterialTopTabNavigator} from '@react-navigation/material-top-tabs';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {useAppSettings} from '../components/AppSettings';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\nimport {App as GettingStarted} from '../../luna-app/App';\nimport Profile from './Profile';\nimport Settings from './Settings';\n\nconst Stack = createStackNavigator();\nconst TopTabs = createMaterialTopTabNavigator();\n\nconst ProfileStack = () => {\n  const appSettings = useAppSettings();\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{headerShown: false}}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        options={{title: appSettings.t('settings')}}\n        component={Settings}\n      />\n    </Stack.Navigator>\n  );\n};\n\nconst SignedIn = () => {\n  // Used for status bar layout in react-navigation\n  const insets = useSafeAreaInsets();\n  const appSettings = useAppSettings();\n\n  const screenOptions = {\n    tabBarStyle: {\n      paddingTop: insets.top,\n    },\n  };\n\n  return (\n    <TopTabs.Navigator screenOptions={screenOptions}>\n      <TopTabs.Screen\n        name=\"Home\"\n        options={{title: appSettings.t('gettingStarted')}}\n        component={GettingStarted}\n      />\n      <TopTabs.Screen\n        name=\"UserProfile\"\n        options={{title: appSettings.t('userInfo')}}\n        component={ProfileStack}\n      />\n    </TopTabs.Navigator>\n  );\n};\n\nexport default SignedIn;\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/analytics';\n\nimport initializeApp from './firebase-init';\ninitializeApp();\n\nconst analytics = firebase.analytics;\nexport default analytics;\n","import {english} from './en';\nimport {spanish} from './es';\n\nexport interface translation {\n  [key: string]: string;\n}\n\nexport interface translationMap {\n  [key: string]: translation;\n}\n\nexport const translations: translationMap = {en: english, es: spanish};\n","import {translation} from './index';\nrequire('dayjs/locale/en');\n\nexport const english: translation = {\n  loading: 'Loading',\n  forgotPassword: 'Forgot Password?',\n  createAnAccount: 'Create an Account',\n  phoneSignIn: 'Sign in with phone number',\n  phoneSignInTitle: 'Phone Sign In',\n  signIn: 'Sign In',\n\n  gettingStarted: 'Getting Started',\n  userInfo: 'User Info',\n  settings: 'Settings',\n\n  createAccountError: 'Create Account - Error',\n  createAccountPasswordsDifferent: 'Passwords do not match',\n  createAccountInstructions:\n    'Create an account with your email and password. Once created you will be automatically logged in to your profile:',\n  emailLabel: 'Email Address',\n  passwordLabel: 'Password',\n  createAccountPasswordConfirmLabel: 'Confirm Password',\n  passwordsDoNotMatch: 'Passwords do not match',\n  createAccountCreating: 'Creating Account',\n  createAccountCreate: 'Create Account',\n\n  forgotPasswordInstructions:\n    'Enter your email address below to send a password reset email:',\n  forgotPasswordLabel: 'Email Address',\n  forgotPasswordError: 'Forgot Password - Error',\n  forgotPasswordSucess: 'Check your email for password reset instructions',\n  forgotPasswordSending: 'Sending Password Reset',\n  forgotPasswordSend: 'Send Password Reset',\n\n  phoneAuthError: 'Phone Auth Error',\n  phoneVerificationError: 'Phone Verification Error',\n  phoneVerificationCode: 'Verification Code',\n  phoneVerificationConfirm: 'Confirm',\n  phoneVerificationCountryInstructions: 'Touch to select phone number country',\n  phoneVerificationNumberInstructions: 'Enter your phone number:',\n  phoneVerificationNumberLabel: 'Phone Number',\n  phoneVerificationNumberSubmit: 'Submit',\n\n  signInError: 'Sign In - Error',\n  signInSigningIn: 'Signing In',\n  signInSignIn: 'Sign In',\n\n  profileLastSignIn: 'Last sign-in',\n\n  userUpdateError: 'User Update Error',\n  userPasswordChanged: 'Password successfully changed',\n  userEmailVerify: 'Re-send',\n  userEmailVerification: 'Verification',\n  userEmailVerificationInstructions1: 'A verification email has been sent to',\n  userEmailVerificationInstructions2:\n    'Please follow the instructions to verify your email address',\n  userEmailVerificationBanner:\n    'Please verify your email address to use the full features of this app! Click the button below to resend a verification email.',\n  userDisplayLabel: 'Display Settings:',\n  userNameDisplayLabel: 'Display Name',\n  userNameDisplayInstructions:\n    'Set a custom display name for a personalized greeting',\n  userNameDisplaySave: 'Save',\n  userPasswordUpdateLabel: 'Password Update:',\n  userPasswordInstructions:\n    'Update your account password. For security purposes, please enter your current account password.',\n  userPasswordCurrent: 'Current Password',\n  userPasswordNew: 'New Password',\n  userPasswordConfirm: 'Confirm New Password',\n  userPasswordUpdate: 'Update',\n  userSignOut: 'Sign Out',\n};\n","import {translation} from './index';\nrequire('dayjs/locale/es');\n\nexport const spanish: translation = {\n  loading: 'Cargando',\n  forgotPassword: 'Olvidó Contrasena?',\n  createAnAccount: 'Crea una Cuenta',\n  phoneSignIn: 'Entra con número de móvil',\n  phoneSignInTitle: 'Entra con Número de Móvil',\n  signIn: 'Entra',\n\n  gettingStarted: 'Como Empezar',\n  userInfo: 'Usuario',\n  settings: 'Configuración',\n\n  createAccountError: 'Crea Cuenta - Error',\n  createAccountPasswordsDifferent: 'Las contraseñas son diferente',\n  createAccountInstructions:\n    'Crea una cuenta con su correo electrónico y contraseña. Una vez creada, entrará automáticamente en su perfil:',\n  emailLabel: 'Correo Electrónico',\n  passwordLabel: 'Contraseña',\n  createAccountPasswordConfirmLabel: 'Confirma Contraseña',\n  passwordsDoNotMatch: 'Contraseñas no estan de acuerdo',\n  createAccountCreating: 'Creando Cuenta',\n  createAccountCreate: 'Crea Cuenta',\n\n  forgotPasswordInstructions:\n    'Entra su correo electrónico debajo para enviar un email para reestablecer su contraseña',\n  forgotPasswordLabel: 'Correo Electrónico',\n  forgotPasswordError: 'Olvodó Password - Error',\n  forgotPasswordSuccess:\n    'Compruebe su correo electrónico para ver las instrucciones de restablecimiento de la contraseña',\n  forgotPasswordSending: 'Enviando correo',\n  forgotPasswordSend: 'Envia Correo',\n\n  phoneAuthError: 'Entra con Número de Móvil Error',\n  phoneVerificationError: 'Error con Verificación de Móvil',\n  phoneVerificationCode: 'Código de Verificación',\n  phoneVerificationConfirm: 'Confirma',\n  phoneVerificationCountryInstructions: 'Marca para elegir pais de telefono',\n  phoneVerificationNumberInstructions: 'Entra su número de móvil:',\n  phoneVerificationNumberLabel: 'Número de Móvil',\n  phoneVerificationNumberSubmit: 'Entra',\n\n  signInError: 'Entrar - Error',\n  signInSigningIn: 'Entrando',\n  signInSignIn: 'Entra',\n\n  profileLastSignIn: 'Último ingreso',\n\n  userUpdateError: 'Error Actualizando Usuario',\n  userPasswordChanged: 'Contraseña cambiada con éxito',\n  userEmailVerify: 'Re-enviar',\n  userEmailVerification: 'Verificación',\n  userEmailVerificationInstructions1:\n    'Se ha enviado un correo electrónico de verificación a',\n  userEmailVerificationInstructions2:\n    'Siga las instrucciones para verificar su dirección de correo electrónico',\n  userEmailVerificationBanner:\n    'Por favor, verifique su dirección de correo electrónico para utilizar todas las funciones de esta aplicación. Haz clic en el botón de abajo para reenviar un correo electrónico de verificación',\n  userDisplayLabel: 'Configuración',\n  userNameDisplayLabel: 'Nombre para mostrar',\n  userNameDisplayInstructions:\n    'Establecer un nombre de visualización para un saludo personalizado',\n  userNameDisplaySave: 'Guardar',\n  userPasswordUpdateLabel: 'Actualiza Contraseña:',\n  userPasswordInstructions:\n    'Actualice la contraseña de su cuenta. Por razones de seguridad, introduzca la contraseña actual de su cuenta',\n  userPasswordCurrent: 'Contraseña Actual',\n  userPasswordNew: 'Contraseña Nueva',\n  userPasswordConfirm: 'Contraseña Nueva Confirmada',\n  userPasswordUpdate: 'Cambie',\n  userSignOut: 'Salir',\n};\n","import {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\n\n// Customize the themes here as necessary\n\nexport const darkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n    primary: '#009688',\n  },\n};\n\nexport const defaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n    primary: '#009688',\n  },\n};\n\n// export default {\n//   ...DefaultTheme,\n//   dark: false,\n//   roundness: 3,\n//   colors: {\n//     ...DefaultTheme.colors,\n//     primary: '#009688',\n//     accent: '#fff',\n//     background: '#fff',\n//   },\n// };\n","/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * Generated with the TypeScript template\n * https://github.com/react-native-community/react-native-template-typescript\n *\n * @format\n */\n\nimport appJson from './../app.json';\nimport React from 'react';\nimport {\n  Button,\n  ScrollView,\n  StyleSheet,\n  Text,\n  useColorScheme,\n  View,\n} from 'react-native';\nimport {\n  Colors,\n  DebugInstructions,\n  Header,\n  LearnMoreLinks,\n  ReloadInstructions,\n  // @ts-ignore -- these are not well typed, but are only example screens\n} from '../../node_modules/react-native/Libraries/NewAppScreen';\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {createMaterialTopTabNavigator} from '@react-navigation/material-top-tabs';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport {NavigationContainer, useLinkTo} from '@react-navigation/native';\n\n// *****************************************************************************************************\n// This pasted directly in from this file upstream\n// https://github.com/react-native-community/react-native-template-typescript/blob/main/template/App.tsx\n// The SafeAreaView and StatusBar are commented as those characteristics are provided by react-navigation\nconst Section: React.FC<{\n  title: string;\n}> = ({children, title}) => {\n  const isDarkMode = useColorScheme() === 'dark';\n  return (\n    <View style={styles.sectionContainer}>\n      <Text\n        style={[\n          styles.sectionTitle,\n          {\n            color: isDarkMode ? Colors.white : Colors.black,\n          },\n        ]}>\n        {title}\n      </Text>\n      <Text\n        style={[\n          styles.sectionDescription,\n          {\n            color: isDarkMode ? Colors.light : Colors.dark,\n          },\n        ]}>\n        {children}\n      </Text>\n    </View>\n  );\n};\n\nexport const App = () => {\n  const isDarkMode = useColorScheme() === 'dark';\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,\n  };\n\n  return (\n    // <SafeAreaView style={backgroundStyle}> // <-- provided by react-navigation\n    // <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} /> // <-- provided by react-navigation\n    <ScrollView\n      contentInsetAdjustmentBehavior=\"automatic\"\n      style={backgroundStyle}>\n      <Header />\n      <View\n        style={{\n          backgroundColor: isDarkMode ? Colors.black : Colors.white,\n        }}>\n        <Section title=\"Step One\">\n          Edit <Text style={styles.highlight}>App.tsx</Text> to change this\n          screen and then come back to see your edits.\n        </Section>\n        <Section title=\"See Your Changes\">\n          <ReloadInstructions />\n        </Section>\n        <Section title=\"Debug\">\n          <DebugInstructions />\n        </Section>\n        <Section title=\"Learn More\">\n          Read the docs to discover what to do next:\n        </Section>\n        <LearnMoreLinks />\n      </View>\n    </ScrollView>\n    // </SafeAreaView> // <-- provided by react-navigation\n  );\n};\n\n// *****************************************************************************************************\n// The rest of the file is to set up a react-navigation and react-native-vector-icons demonstraiton:\nconst Tab = createMaterialTopTabNavigator();\nconst TopTabNavigator = () => {\n  // Used for status bar layout in react-navigation\n  const insets = useSafeAreaInsets();\n\n  // Allows us to use web-compatible navigation\n  const linkTo = useLinkTo();\n\n  // Dark mode theming items\n  const isDarkMode = useColorScheme() === 'dark';\n  const accentColor = isDarkMode ? Colors.ligher : Colors.darker;\n  const primaryColor = isDarkMode ? Colors.darker : Colors.lighter;\n  const backgroundStyle = {backgroundColor: primaryColor, flex: 1};\n\n  const DetailsTab = () => (\n    <View style={[backgroundStyle, styles.detailsContainer]}>\n      <Icon name=\"rocket\" size={30} color={'red'} />\n      <Text\n        style={[\n          styles.sectionTitle,\n          {\n            color: isDarkMode ? Colors.white : Colors.black,\n          },\n        ]}>\n        If you see a rocket, react-native-vector-icons is working!\n      </Text>\n    </View>\n  );\n  const LinkingExample = () => {\n    return (\n      <View style={[backgroundStyle, styles.detailsContainer]}>\n        <Button title=\"Link to Details\" onPress={() => linkTo('/details')} />\n      </View>\n    );\n  };\n\n  const screenOptions = {\n    tabBarStyle: {\n      backgroundColor: primaryColor,\n      paddingTop: insets.top,\n    },\n    tabBarLabelStyle: {color: isDarkMode ? Colors.light : Colors.dark},\n    tabBarIndicatorStyle: {backgroundColor: accentColor},\n  };\n\n  return (\n    <Tab.Navigator initialRouteName=\"Home\" screenOptions={screenOptions}>\n      <Tab.Screen component={App} key={'Home'} name={'Home'} />\n      <Tab.Screen component={DetailsTab} key={'Details'} name={'Details'} />\n      <Tab.Screen component={LinkingExample} key={'Linking'} name={'Linking'} />\n    </Tab.Navigator>\n  );\n};\n\nconst TabbedApp = () => {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer\n        linking={{\n          prefixes: ['plaut-ro.github.io/luna', 'localhost'],\n          config: {\n            screens: {\n              Details: 'details',\n              Linking: 'linking',\n              Home: '*', // Fall back to if no routes match\n            },\n          },\n        }}\n        documentTitle={{\n          formatter: (options, route) =>\n            `${appJson.displayName} - ${options?.title ?? route?.name}`,\n        }}>\n        <TopTabNavigator />\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  detailsContainer: {\n    flex: 1,\n    alignContent: 'center',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  sectionContainer: {\n    marginTop: 32,\n    paddingHorizontal: 24,\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n  sectionDescription: {\n    marginTop: 8,\n    fontSize: 18,\n    fontWeight: '400',\n  },\n  highlight: {\n    fontWeight: '700',\n  },\n});\n\nexport default TabbedApp;\n","import {FirebaseAuthTypes} from '@react-native-firebase/auth';\n\ntype ProviderID = 'google.com' | 'facebook.com' | 'apple.com';\n\nconst providerNames = {\n  'google.com': 'Google',\n  'facebook.com': 'Facebook',\n  'apple.com': 'Apple',\n};\n\nconst providerTitles: {[key: string]: string} = {\n  SIGN_IN: 'Sign in with',\n  LINK: 'Link',\n  UNLINK: 'Unlink',\n};\n\n/**\n * Return array of user auth providers\n */\nexport function getProviders(user: FirebaseAuthTypes.User | null): string[] {\n  if (user) {\n    return user.providerData.map(provider => provider.providerId);\n  }\n\n  return [];\n}\n\nexport function getProviderButtonTitle(\n  user: FirebaseAuthTypes.User | null,\n  providerID: ProviderID,\n) {\n  const providers = getProviders(user);\n  const isProvider = providers.includes(providerID);\n  const isOnlyProvider = providers.length === 1 && isProvider;\n  let variant = 'SIGN_IN';\n\n  if (user) {\n    variant = isProvider ? 'UNLINK' : 'LINK';\n  }\n\n  return {\n    variant,\n    title: `${providerTitles[variant]} ${providerNames[providerID]}`,\n    isOnlyProvider,\n  };\n}\n\nexport function handleAuthError(\n  error: FirebaseAuthTypes.PhoneAuthError,\n  errorHandler: CallableFunction,\n): void {\n  switch (error.code) {\n    case 'auth/account-exists-with-different-credential':\n    case 'auth/email-already-in-use':\n      errorHandler('There already exists an account with this email address.');\n      break;\n    case 'auth/invalid-email':\n      errorHandler('Please enter a valid email address.');\n      break;\n    case 'auth/invalid-credential':\n      errorHandler('Your credentials are invalid or expired.');\n      break;\n    case 'auth/user-disabled':\n      errorHandler('Your account has been disabled.');\n      break;\n    case 'auth/operation-not-allowed':\n      console.info(\n        'The type of account corresponding to the credential is not enabled. Enable the account type in the Firebase Console, under the Auth tab.',\n      );\n      errorHandler(\n        'These type of accounts are not enabled for this app by the developer. More info is available in the console output.',\n      );\n      break;\n    case 'auth/user-not-found':\n    case 'auth/wrong-password':\n      errorHandler('No user found or wrong password.');\n      break;\n    case 'auth/invalid-verification-code':\n      errorHandler(\n        'Unable to sign you in, the verification code is invalid. Please try again.',\n      );\n      break;\n    case 'auth/invalid-verification-id':\n      errorHandler(\n        'Unable to sign you in, the verification ID is invalid. Please try again.',\n      );\n      break;\n    case 'auth/invalid-phone-number':\n      errorHandler('Please enter a valid phone number.');\n      break;\n    case 'auth/missing-phone-number':\n      errorHandler('Please enter a phone number.');\n      break;\n    case 'auth/quota-exceeded':\n      errorHandler('This app has exceeded its SMS quota.');\n      break;\n    default:\n      errorHandler(error.message);\n      console.error(error);\n      break;\n  }\n}\n","import dayjs from 'dayjs';\nimport {useContext} from 'react';\nimport {Platform, StyleSheet, View} from 'react-native';\nimport {\n  Avatar,\n  Caption,\n  FAB,\n  Headline,\n  Subheading,\n  useTheme,\n  Title,\n} from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport {useNavigation} from '@react-navigation/core';\nimport {UserContext} from '../App';\nimport Hero from '../components/Hero';\nimport Provider from '../components/AuthProvider';\nimport Facebook from '../auth-providers/Facebook';\nimport Google from '../auth-providers/Google';\nimport Apple from '../auth-providers/Apple';\nimport {getProviders} from '../util/helpers';\nimport {\n  fallbackLanguageLocale,\n  useAppSettings,\n} from '../components/AppSettings';\nrequire('dayjs/locale/en');\nrequire('dayjs/locale/es');\n\nfunction Profile() {\n  const theme = useTheme();\n  const user = useContext(UserContext);\n  const navigation = useNavigation();\n  const appSettings = useAppSettings();\n\n  if (!user) {\n    return null;\n  }\n\n  // Array of providers the the user is linked with\n  const providers = getProviders(user);\n\n  return (\n    <View style={styles.container}>\n      <Hero height={60} style={{backgroundColor: theme.colors.primary}} />\n      <View style={[styles.content, styles.profile]}>\n        {user.photoURL ? (\n          <Avatar.Image size={80} source={{uri: user.photoURL}} />\n        ) : (\n          <Avatar.Text\n            size={80}\n            label={\n              user.displayName\n                ? user.displayName.substring(0, 2).toUpperCase()\n                : user.email\n                ? user.email.substring(0, 2).toUpperCase()\n                : 'A'\n            }\n            style={[styles.avatar, {borderColor: theme.colors.background}]}\n          />\n        )}\n      </View>\n      <View style={styles.content}>\n        <Headline>\n          {user.displayName ? user.displayName : user.email}{' '}\n          {user.emailVerified && (\n            <Icon name=\"check-decagram\" color=\"#2196f3\" size={26} />\n          )}\n        </Headline>\n        {!!user.displayName && <Title>{user.email}</Title>}\n        {!!user.phoneNumber && <Subheading>{user.phoneNumber}</Subheading>}\n        {!!user.metadata.lastSignInTime && (\n          <Caption>\n            {`${appSettings.t('profileLastSignIn')}: ${dayjs(\n              user.metadata.lastSignInTime,\n            )\n              .locale(\n                appSettings.languageLocale?.languageTag ??\n                  fallbackLanguageLocale.languageTag,\n              )\n              .format()}`}\n          </Caption>\n        )}\n      </View>\n      <View style={[styles.providers, {backgroundColor: theme.colors.surface}]}>\n        <Provider type=\"password\" active={providers.includes('password')} />\n        <Provider type=\"facebook\" active={providers.includes('facebook.com')} />\n        <Provider type=\"google\" active={providers.includes('google.com')} />\n        <Provider type=\"phone\" active={providers.includes('phone')} />\n      </View>\n      <FAB\n        style={[styles.fab, {backgroundColor: theme.colors.primary}]}\n        icon=\"account-settings\"\n        // @ts-ignore FIXME need to type the navigator\n        onPress={() => navigation.navigate('Settings')}\n      />\n\n      <View style={styles.center}>\n        {Platform.OS !== 'web' && <Facebook />}\n        {Platform.OS !== 'web' && <Google />}\n        {Platform.OS !== 'web' && <Apple />}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: 'relative',\n  },\n  content: {\n    paddingHorizontal: 20,\n  },\n  profile: {\n    marginTop: -50,\n    paddingVertical: 10,\n  },\n  avatar: {\n    borderWidth: 5,\n    elevation: 4,\n  },\n  providers: {\n    elevation: 4,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    marginVertical: 30,\n    padding: 20,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  center: {\n    width: '100%',\n    alignItems: 'center',\n  },\n});\n\nexport default Profile;\n","import {StyleSheet, View, ViewStyle} from 'react-native';\nimport {useTheme} from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\ninterface Props {\n  type: string;\n  active: boolean;\n  style?: ViewStyle;\n}\n\nconst providerMap: {[key: string]: string} = {\n  password: 'email-lock',\n  facebook: 'facebook',\n  google: 'google',\n  phone: 'phone',\n};\n\nfunction Provider({type, active, style}: Props): JSX.Element | null {\n  const theme = useTheme();\n  const icon = providerMap[type];\n\n  if (!icon) {\n    return null;\n  }\n\n  return (\n    <View style={[style, styles[active ? 'active' : 'inactive']]}>\n      <Icon\n        name={icon}\n        size={24}\n        color={active ? theme.colors.primary : theme.colors.onSurface}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  inactive: {\n    opacity: 0.3,\n  },\n  active: {\n    opacity: 1,\n  },\n});\n\nexport default Provider;\n","import {FBAccessToken} from 'react-native-fbsdk-next/types/FBAccessToken';\nimport {LoginResult} from 'react-native-fbsdk-next/types/FBLoginManager';\n\nexport class AccessToken {\n  async logInWithPermissions(): Promise<LoginResult> {\n    console.log('facebook trying to login');\n    return {isCancelled: true};\n  }\n}\n\nexport class LoginManager {\n  async getCurrentAccessToken(): Promise<FBAccessToken | null> {\n    console.log('facebook trying to get current access token');\n    return null;\n  }\n  logOut(): void {\n    console.log('facebook trying to logOut');\n    return;\n  }\n}\n","export default class appleAuth {\n  // foo\n}\n\nexport class AppleButton {\n  /* foo */\n}\n\nexport enum AppleRequestOperation /* foo */ {}\n\nexport enum AppleRequestScope /* foo */ {}\n","import auth from '@react-native-firebase/auth';\nimport {useEffect, useState} from 'react';\nimport {Alert, ScrollView, StyleSheet, View} from 'react-native';\nimport {GoogleSignin} from '@react-native-google-signin/google-signin';\nimport {\n  Banner,\n  Button,\n  Divider,\n  HelperText,\n  Paragraph,\n  TextInput,\n  Title,\n  useTheme,\n} from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport {useAppSettings} from '../components/AppSettings';\n\nfunction EditProfile(): JSX.Element | null {\n  const user = auth().currentUser;\n  const theme = useTheme();\n  const appSettings = useAppSettings();\n\n  const [error, setError] = useState('');\n  const [signingOut, setSigningOut] = useState(false);\n  const [savingName, setSavingName] = useState(false);\n  const [displayName, setDisplayName] = useState(\n    user ? user.displayName || '' : '',\n  );\n  const [help, setHelp] = useState<string>('');\n  const [savingPassword, setSavingPassword] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [passwordSuccess, setPasswordSuccess] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert(appSettings.t('userUpdateError'), error);\n      setError('');\n    }\n    if (passwordSuccess) {\n      Alert.alert(appSettings.t('userPasswordChanged'));\n      setPasswordSuccess(false);\n      // @ts-ignore\n      navigation.navigate('SignIn');\n    }\n  }, [error, passwordSuccess, appSettings]);\n\n  useEffect(() => {\n    if (newPassword === confirmPassword) {\n      setHelp('');\n    } else if (\n      newPassword &&\n      confirmPassword &&\n      newPassword !== confirmPassword\n    ) {\n      setHelp(appSettings.t('passwordsDoNotMatch'));\n    }\n  }, [newPassword, confirmPassword, appSettings]);\n\n  async function signOut() {\n    setSigningOut(true);\n    await GoogleSignin.signOut();\n    await auth().signOut();\n  }\n\n  async function handleDisplayName() {\n    if (!user) {\n      return;\n    }\n\n    if (!savingName) {\n      try {\n        setSavingName(true);\n        await user.updateProfile({\n          displayName,\n        });\n        await user.reload();\n      } catch (e) {\n        setError((e as Error).message);\n      } finally {\n        setSavingName(false);\n      }\n    }\n  }\n\n  async function handlePassword() {\n    if (!user || !user.email) {\n      return;\n    }\n    if (!savingPassword) {\n      try {\n        setSavingPassword(true);\n        await auth().signInWithEmailAndPassword(user.email, currentPassword);\n        await user.updatePassword(newPassword);\n        setPasswordSuccess(true);\n      } catch (e) {\n        setError((e as Error).message);\n      } finally {\n        setSavingPassword(false);\n      }\n    }\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, {backgroundColor: theme.colors.background}]}>\n      <Banner\n        visible={!user.emailVerified}\n        actions={[\n          {\n            label: appSettings.t('userEmailVerify'),\n            onPress: () => {\n              user.sendEmailVerification().then(() =>\n                Alert.alert(\n                  appSettings.t('userEmailVerification'),\n                  `${appSettings.t('userEmailVerificationInstructions1')} \n                    ${user.email}\n                    . ${appSettings.t('userEmailVerificationInstructions2')}.`,\n                ),\n              );\n            },\n          },\n        ]}\n        icon={({size}) => (\n          <Icon name=\"alert-decagram\" size={size} color=\"#f44336\" />\n        )}>\n        {appSettings.t('userEmailVerificationBanner')}\n      </Banner>\n      <View style={styles.content}>\n        <Title>{appSettings.t('userNameDisplayLabel')}</Title>\n        <Paragraph>{appSettings.t('userNameDisplayInstructions')}</Paragraph>\n        <TextInput\n          style={styles.input}\n          mode=\"outlined\"\n          label={appSettings.t('userNameDisplayLabel')}\n          value={displayName}\n          onChangeText={setDisplayName}\n          autoComplete=\"name\"\n        />\n        <Button\n          mode=\"contained\"\n          disabled={!displayName}\n          loading={savingName}\n          onPress={handleDisplayName}\n          style={styles.button}>\n          {appSettings.t('userNameDisplaySave')}\n        </Button>\n      </View>\n      <Divider style={styles.divider} />\n      <View style={styles.content}>\n        <Title>{appSettings.t('userPasswordUpdateLabel')}</Title>\n        <Paragraph>{appSettings.t('userPasswordInstructions')}</Paragraph>\n        <TextInput\n          secureTextEntry\n          style={styles.input}\n          mode=\"outlined\"\n          label={appSettings.t('userPasswordCurrent')}\n          value={currentPassword}\n          onChangeText={setCurrentPassword}\n          autoComplete=\"password\"\n        />\n        <TextInput\n          secureTextEntry\n          style={styles.input}\n          mode=\"outlined\"\n          label={appSettings.t('userPasswordNew')}\n          value={newPassword}\n          onChangeText={setNewPassword}\n          autoComplete=\"password\"\n        />\n        <TextInput\n          secureTextEntry\n          style={styles.input}\n          mode=\"outlined\"\n          label={appSettings.t('userPasswordConfirm')}\n          value={confirmPassword}\n          onChangeText={setConfirmPassword}\n          autoComplete=\"password\"\n        />\n        <HelperText type=\"error\" visible={!!help}>\n          {help}\n        </HelperText>\n        <Button\n          disabled={\n            !currentPassword ||\n            !newPassword ||\n            !confirmPassword ||\n            newPassword !== confirmPassword\n          }\n          mode=\"contained\"\n          style={styles.button}\n          loading={savingPassword}\n          onPress={handlePassword}>\n          {appSettings.t('userPasswordUpdate')}\n        </Button>\n      </View>\n      <Divider style={styles.divider} />\n      <View style={[styles.content]}>\n        <Button\n          mode=\"contained\"\n          loading={signingOut}\n          onPress={() => (signingOut ? null : signOut())}\n          style={[styles.button, styles.maxWidth]}>\n          {appSettings.t('userSignOut')}\n        </Button>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  maxWidth: {\n    width: '100%',\n  },\n  content: {\n    padding: 16,\n  },\n  input: {\n    marginTop: 20,\n  },\n  button: {\n    alignSelf: 'center',\n    marginVertical: 20,\n  },\n  divider: {\n    height: 4,\n  },\n});\n\nexport default EditProfile;\n","import {createStackNavigator} from '@react-navigation/stack';\nimport {useAppSettings} from '../components/AppSettings';\nimport CreateAccount from './CreateAccount';\nimport ForgotPassword from './ForgotPassword';\nimport PhoneSignIn from './PhoneSignIn';\nimport SignIn from './SignIn';\n\nconst Stack = createStackNavigator();\n\nfunction SignedOutStack() {\n  const appSettings = useAppSettings();\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"home\"\n        component={SignIn}\n        options={{headerShown: false, title: appSettings.t('signIn')}}\n      />\n      <Stack.Screen\n        name=\"CreateAccount\"\n        options={{title: appSettings.t('createAnAccount')}}\n        component={CreateAccount}\n      />\n      <Stack.Screen\n        name=\"ForgotPassword\"\n        component={ForgotPassword}\n        options={{title: appSettings.t('forgotPassword')}}\n      />\n      <Stack.Screen\n        name=\"PhoneSignIn\"\n        component={PhoneSignIn}\n        options={{title: appSettings.t('phoneSignInTitle')}}\n      />\n    </Stack.Navigator>\n  );\n}\n\nexport default SignedOutStack;\n","import {useEffect, useState} from 'react';\nimport auth, {FirebaseAuthTypes} from '@react-native-firebase/auth';\nimport {Alert, ScrollView, StyleSheet} from 'react-native';\nimport {\n  Button,\n  HelperText,\n  Paragraph,\n  TextInput,\n  useTheme,\n} from 'react-native-paper';\nimport {handleAuthError} from '../util/helpers';\nimport {useAppSettings} from '../components/AppSettings';\n\nfunction CreateAccount(): JSX.Element {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [confirm, setConfirm] = useState<string>('');\n\n  const [help, setHelp] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const theme = useTheme();\n  const appSettings = useAppSettings();\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert(appSettings.t('createAccountError'), error);\n      setError('');\n    }\n  }, [error, appSettings]);\n\n  useEffect(() => {\n    if (password === confirm) {\n      setHelp('');\n    } else if (password && confirm && password !== confirm) {\n      setHelp(appSettings.t('passwordsDoNotMatch'));\n    }\n  }, [password, confirm, appSettings]);\n\n  async function handleCreate() {\n    try {\n      setLoading(true);\n      setError('');\n      await auth().createUserWithEmailAndPassword(email, password);\n    } catch (e) {\n      handleAuthError(e as FirebaseAuthTypes.PhoneAuthError, setError);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, {backgroundColor: theme.colors.background}]}>\n      <Paragraph>{appSettings.t('createAccountInstructions')}</Paragraph>\n      <TextInput\n        style={styles.input}\n        mode=\"outlined\"\n        label={appSettings.t('emailLabel')}\n        value={email}\n        onChangeText={setEmail}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        autoComplete=\"email\"\n        autoFocus={true}\n      />\n      <TextInput\n        secureTextEntry\n        style={styles.input}\n        mode=\"outlined\"\n        label={appSettings.t('passwordLabel')}\n        value={password}\n        onChangeText={setPassword}\n        autoComplete=\"password\"\n      />\n      <TextInput\n        secureTextEntry\n        style={styles.input}\n        mode=\"outlined\"\n        label={appSettings.t('createAccountPasswordConfirmLabel')}\n        value={confirm}\n        onChangeText={setConfirm}\n        autoComplete=\"password\"\n      />\n      <HelperText type=\"error\" visible={!!help}>\n        {help}\n      </HelperText>\n      <Button\n        loading={loading}\n        mode=\"contained\"\n        disabled={!email || !password || !confirm || !!help}\n        onPress={() => (loading ? null : handleCreate())}>\n        {loading\n          ? appSettings.t('createAccountCreating')\n          : appSettings.t('createAccountCreate')}\n      </Button>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n  },\n  input: {\n    marginVertical: 10,\n  },\n});\n\nexport default CreateAccount;\n","import {useEffect, useState} from 'react';\nimport auth, {FirebaseAuthTypes} from '@react-native-firebase/auth';\nimport {Alert, StyleSheet, View} from 'react-native';\nimport {Button, Paragraph, TextInput, useTheme} from 'react-native-paper';\nimport {useNavigation} from '@react-navigation/core';\nimport {handleAuthError} from '../util/helpers';\nimport {useAppSettings} from '../components/AppSettings';\n\nfunction ForgotPassword(): JSX.Element {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [email, setEmail] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<boolean>(false);\n  const navigation = useNavigation();\n  const theme = useTheme();\n  const appSettings = useAppSettings();\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert(appSettings.t('forgotPasswordError'), error);\n      setError('');\n    }\n    if (success) {\n      Alert.alert(appSettings.t('forgotPasswordSuccess'));\n      setSuccess(false);\n      // @ts-ignore\n      navigation.navigate('SignIn');\n    }\n  }, [error, success, navigation, appSettings]);\n\n  async function attemptReset() {\n    if (!email) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n      await auth().sendPasswordResetEmail(email);\n      setSuccess(true);\n    } catch (e) {\n      handleAuthError(e as FirebaseAuthTypes.PhoneAuthError, setError);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <View\n      style={[styles.container, {backgroundColor: theme.colors.background}]}>\n      <Paragraph>{appSettings.t('forgotPasswordInstructions')}</Paragraph>\n      <TextInput\n        autoFocus={true}\n        value={email}\n        autoCapitalize={'none'}\n        style={styles.input}\n        mode=\"outlined\"\n        label={appSettings.t('forgotPasswordLabel')}\n        onChangeText={setEmail}\n        autoComplete=\"email\"\n      />\n      <Button\n        disabled={!email}\n        loading={loading}\n        mode=\"contained\"\n        onPress={() => (loading ? null : attemptReset())}>\n        {loading\n          ? appSettings.t('forgotPasswordSending')\n          : appSettings.t('forgotPasswordSend')}\n      </Button>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n  },\n  input: {\n    marginVertical: 10,\n  },\n});\n\nexport default ForgotPassword;\n","import {StyleSheet, View} from 'react-native';\nimport {useTheme} from 'react-native-paper';\nimport Phone from '../auth-providers/Phone';\n\nfunction PhoneSignIn(): JSX.Element {\n  const theme = useTheme();\n  return (\n    <View style={[styles.container, {backgroundColor: theme.colors.backdrop}]}>\n      <Phone />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n});\n\nexport default PhoneSignIn;\n","import auth, {FirebaseAuthTypes} from '@react-native-firebase/auth';\nimport {\n  AsYouType,\n  CountryCode,\n  parsePhoneNumberFromString,\n} from 'libphonenumber-js';\nimport {Fragment, useRef, useState} from 'react';\nimport {Alert, StyleSheet} from 'react-native';\n\nimport CountryPicker, {Country} from 'react-native-country-picker-modal';\nimport {Button, Paragraph, TextInput, useTheme} from 'react-native-paper';\nimport {useAppSettings} from '../components/AppSettings';\n\ntype ConfirmationRef =\n  | ((\n      verificationCode: string,\n    ) => Promise<FirebaseAuthTypes.UserCredential | null>)\n  | null;\n\nfunction Phone(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n  const confirmationRef = useRef<ConfirmationRef>(null);\n  const [number, setNumber] = useState('+1 ');\n  const [verification, setVerification] = useState('');\n\n  const [countryCode, setCountryCode] = useState('US');\n  const [country, setCountry] = useState<Country>();\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const theme = useTheme();\n  const appSettings = useAppSettings();\n\n  const onSelect = (newCountry: Country) => {\n    setCountryCode(newCountry.cca2);\n    setCountry(newCountry);\n    setNumber(`+${newCountry.callingCode[0]} `);\n  };\n\n  async function handlePhoneAuth() {\n    if (!loading && confirmationRef) {\n      setLoading(true);\n      try {\n        const result = await auth().signInWithPhoneNumber(number);\n        confirmationRef.current = result.confirm.bind(result);\n      } catch (error) {\n        setLoading(false);\n        confirmationRef.current = null;\n        Alert.alert(appSettings.t('phoneAuthError'), (error as Error).message);\n      }\n    }\n  }\n\n  function handleNumber(text: string) {\n    const parsed = new AsYouType().input(text);\n    setNumber(parsed);\n  }\n\n  function isValid() {\n    const phoneNumber = parsePhoneNumberFromString(\n      number,\n      ((country && country.cca2) || 'US') as CountryCode,\n    );\n    if (phoneNumber) {\n      return phoneNumber.isValid();\n    }\n\n    return false;\n  }\n\n  async function handleVerification() {\n    if (!loading && confirmationRef.current) {\n      setLoading(true);\n      try {\n        await confirmationRef.current(verification);\n        confirmationRef.current = null;\n      } catch (error) {\n        Alert.alert(\n          appSettings.t('phoneVerificationError'),\n          (error as Error).message,\n        );\n      } finally {\n        setLoading(false);\n      }\n    }\n  }\n\n  return confirmationRef.current ? (\n    <Fragment>\n      <TextInput\n        keyboardType=\"number-pad\"\n        mode=\"outlined\"\n        label={appSettings.t('phoneVerificationCode')}\n        value={verification}\n        onChangeText={setVerification}\n        autoComplete=\"sms-otp\"\n      />\n\n      <Button\n        style={styles.submit}\n        loading={loading}\n        disabled={!verification}\n        mode=\"contained\"\n        onPress={handleVerification}>\n        {appSettings.t('phoneVerificationConfirm')}\n      </Button>\n    </Fragment>\n  ) : (\n    <Fragment>\n      <Paragraph style={styles.paragraph}>\n        {appSettings.t('phoneVerificationCountryInstructions')}\n      </Paragraph>\n      <CountryPicker\n        containerButtonStyle={styles.phoneCountry}\n        theme={{\n          primaryColor: theme.colors.surface,\n          primaryColorVariant: theme.colors.surface,\n          backgroundColor: theme.colors.background,\n          onBackgroundTextColor: theme.colors.onSurface,\n        }}\n        // @ts-ignore\n        countryCode={countryCode}\n        {...{\n          excludeCountries: ['AQ'],\n          onSelect,\n          withFlag: true,\n          withCountryNameButton: true,\n          withCallingCode: true,\n          preferredCountries: ['US', 'GB'],\n          modalProps: {\n            visible,\n          },\n          onClose: () => setVisible(false),\n          onOpen: () => setVisible(true),\n        }}\n      />\n\n      <Paragraph style={styles.paragraph}>\n        {appSettings.t('phoneVerificationNumberInstructions')}\n      </Paragraph>\n      <TextInput\n        keyboardType=\"number-pad\"\n        mode=\"outlined\"\n        label={appSettings.t('phoneVerificationNumberLabel')}\n        value={number}\n        onChangeText={handleNumber}\n        autoComplete=\"tel\"\n      />\n\n      <Button\n        style={styles.submit}\n        loading={loading}\n        disabled={!isValid()}\n        mode=\"contained\"\n        onPress={handlePhoneAuth}>\n        {appSettings.t('phoneVerificationNumberSubmit')}\n      </Button>\n    </Fragment>\n  );\n}\n\nconst styles = StyleSheet.create({\n  phoneCountry: {\n    flexDirection: 'row',\n    position: 'relative',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 3,\n    padding: 13,\n  },\n  phoneCountryCode: {\n    marginTop: 5,\n    marginLeft: 5,\n  },\n  paragraph: {\n    marginBottom: 5,\n  },\n  button: {\n    marginBottom: 20,\n  },\n  picker: {\n    height: 0,\n    opacity: 0,\n  },\n  submit: {\n    marginTop: 20,\n  },\n});\n\nexport default Phone;\n","import {Fragment} from 'react';\nimport {Platform, StyleSheet, View} from 'react-native';\nimport {Button, useTheme} from 'react-native-paper';\nimport {useNavigation} from '@react-navigation/core';\nimport Hero from '../components/Hero';\nimport ProviderButton from '../components/AuthProviderButton';\nimport EmailPassword from '../auth-providers/EmailPassword';\nimport Facebook from '../auth-providers/Facebook';\nimport Google from '../auth-providers/Google';\nimport Apple from '../auth-providers/Apple';\nimport {useAppSettings} from '../components/AppSettings';\n\nfunction SignIn() {\n  const theme = useTheme();\n  const navigation = useNavigation();\n  const appSettings = useAppSettings();\n\n  return (\n    <Fragment>\n      <Hero\n        height={300}\n        image={\n          'https://images.unsplash.com/photo-1555099962-4199c345e5dd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80'\n        }>\n        <EmailPassword />\n      </Hero>\n\n      <View style={styles.center}>\n        <Button\n          color=\"#9e9e9e\"\n          onPress={() => {\n            // @ts-ignore FIXME need to type the navigator\n            return navigation.navigate('ForgotPassword');\n          }}\n          style={styles.button}>\n          {appSettings.t('forgotPassword')}\n        </Button>\n        <Button\n          mode=\"contained\"\n          icon=\"plus\"\n          onPress={() => {\n            // @ts-ignore FIXME need to type the navigator\n            return navigation.navigate('CreateAccount');\n          }}\n          style={styles.button}>\n          {appSettings.t('createAnAccount')}\n        </Button>\n\n        <View\n          style={[styles.divider, {backgroundColor: theme.colors.primary}]}\n        />\n\n        {Platform.OS !== 'web' && <Facebook />}\n        {Platform.OS !== 'web' && <Google />}\n        {Platform.OS !== 'web' && <Apple />}\n        <ProviderButton\n          type=\"phone\"\n          onPress={() => {\n            // @ts-ignore FIXME need to type the navigator\n            return navigation.navigate('PhoneSignIn');\n          }}>\n          {appSettings.t('phoneSignIn')}\n        </ProviderButton>\n      </View>\n    </Fragment>\n  );\n}\n\nconst styles = StyleSheet.create({\n  center: {\n    alignItems: 'center',\n  },\n  fab: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center',\n    elevation: 6,\n    marginTop: -25,\n  },\n  button: {\n    marginVertical: 5,\n    width: 300,\n  },\n  divider: {\n    width: 300,\n    marginVertical: 20,\n    height: StyleSheet.hairlineWidth,\n  },\n});\n\nexport default SignIn;\n","import auth, {FirebaseAuthTypes} from '@react-native-firebase/auth';\nimport {useEffect, useState} from 'react';\nimport {Alert, Image, StyleSheet, View} from 'react-native';\nimport {Button, TextInput, useTheme} from 'react-native-paper';\nimport {handleAuthError} from '../util/helpers';\nimport {useAppSettings} from '../components/AppSettings';\n\nfunction EmailPassword(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const theme = useTheme();\n  const appSettings = useAppSettings();\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert(appSettings.t('signInError'), error);\n      setError('');\n    }\n  }, [error, appSettings]);\n\n  async function attemptSignIn() {\n    if (!email || !password) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n      await auth().signInWithEmailAndPassword(email, password);\n    } catch (e) {\n      setLoading(false);\n      handleAuthError(e as FirebaseAuthTypes.PhoneAuthError, setError);\n    }\n  }\n\n  const styles = StyleSheet.create({\n    signinButton: {\n      alignSelf: 'center',\n      backgroundColor: theme.colors.primary,\n      width: 300,\n    },\n    icon: {\n      alignSelf: 'center',\n      padding: 10,\n      width: 65,\n      height: 65,\n    },\n    form: {\n      flex: 1,\n      padding: 20,\n      textAlign: 'center',\n      justifyContent: 'center',\n      alignSelf: 'stretch',\n    },\n    button: {\n      marginVertical: 20,\n    },\n  });\n\n  const maskTheme = {\n    ...theme,\n    colors: {\n      background: 'transparent',\n      primary: theme.colors.text,\n    },\n  };\n\n  return (\n    <View style={styles.form}>\n      <Image\n        style={styles.icon}\n        source={{\n          uri: 'https://storage.googleapis.com/static.invertase.io/assets/React-Native-Firebase.png',\n        }}\n      />\n      <TextInput\n        value={email}\n        label={appSettings.t('emailLabel')}\n        theme={maskTheme}\n        onChangeText={setEmail}\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        keyboardType=\"email-address\"\n        autoComplete=\"email\"\n      />\n      <TextInput\n        autoCapitalize=\"none\"\n        secureTextEntry\n        value={password}\n        label={appSettings.t('passwordLabel')}\n        theme={maskTheme}\n        onChangeText={setPassword}\n        autoComplete=\"password\"\n      />\n      <Button\n        disabled={loading || !email || !password}\n        style={[styles.button, styles.signinButton]}\n        icon=\"lock\"\n        mode={loading ? 'text' : 'contained'}\n        onPress={() => (loading ? null : attemptSignIn())}\n        // theme={maskTheme}\n        loading={loading}>\n        {loading\n          ? appSettings.t('signInSigningIn')\n          : appSettings.t('signInSignIn')}\n      </Button>\n    </View>\n  );\n}\n\nexport default EmailPassword;\n","import AntDesign_ttf from 'react-native-vector-icons/Fonts/AntDesign.ttf';\nimport Entypo_ttf from 'react-native-vector-icons/Fonts/Entypo.ttf';\nimport EvilIcons_ttf from 'react-native-vector-icons/Fonts/EvilIcons.ttf';\nimport Feather_ttf from 'react-native-vector-icons/Fonts/Feather.ttf';\nimport FontAwesome_ttf from 'react-native-vector-icons/Fonts/FontAwesome.ttf';\nimport Fontisto_ttf from 'react-native-vector-icons/Fonts/Fontisto.ttf';\nimport Foundation_ttf from 'react-native-vector-icons/Fonts/Foundation.ttf';\nimport Ionicons_ttf from 'react-native-vector-icons/Fonts/Ionicons.ttf';\nimport MaterialIcons_ttf from 'react-native-vector-icons/Fonts/MaterialIcons.ttf';\nimport MaterialCommunityIcons_ttf from 'react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf';\nimport Octicons_ttf from 'react-native-vector-icons/Fonts/Octicons.ttf';\nimport Zocial_ttf from 'react-native-vector-icons/Fonts/Zocial.ttf';\nimport SimpleLineIcons_ttf from 'react-native-vector-icons/Fonts/SimpleLineIcons.ttf';\n\nconst IconsCSS = `\n@font-face {\n  src: url(${AntDesign_ttf});\n  font-family: AntDesign;\n}\n@font-face {\n  src: url(${Entypo_ttf});\n  font-family: Entypo;\n}\n@font-face {\n  src: url(${EvilIcons_ttf});\n  font-family: EvilIcons;\n}\n@font-face {\n  src: url(${Feather_ttf});\n  font-family: Feather;\n}\n@font-face {\n  src: url(${FontAwesome_ttf});\n  font-family: FontAwesome;\n}\n@font-face {\n  src: url(${Fontisto_ttf});\n  font-family: Fontisto;\n}\n@font-face {\n  src: url(${Foundation_ttf});\n  font-family: Foundation;\n}\n@font-face {\n  src: url(${Ionicons_ttf});\n  font-family: Ionicons;\n}\n@font-face {\n  src: url(${MaterialIcons_ttf});\n  font-family: Materialicons;\n}\n@font-face {\n  src: url(${MaterialCommunityIcons_ttf});\n  font-family: MaterialCommunityIcons;\n}\n@font-face {\n  src: url(${Octicons_ttf});\n  font-family: Octicons;\n}\n@font-face {\n  src: url(${Zocial_ttf});\n  font-family: Zocial;\n}\n@font-face {\n  src: url(${SimpleLineIcons_ttf});\n  font-family: SimpleLineIcons;\n}\n`;\n\nconst style = document.createElement('style');\nstyle.type = 'text/css';\nif (style.styleSheet) {\n  style.styleSheet.cssText = IconsCSS;\n} else {\n  style.appendChild(document.createTextNode(IconsCSS));\n}\n\ndocument.head.appendChild(style);\n","import appJson from '../app.json';\nimport {StyleSheet, View} from 'react-native';\nimport {createContext, Fragment, ReactNode, useEffect, useState} from 'react';\nimport auth, {FirebaseAuthTypes} from '@react-native-firebase/auth';\nimport {\n  Headline,\n  ActivityIndicator,\n  Provider as PaperProvider,\n} from 'react-native-paper';\nimport SignedInStack from './signed-in/Stack';\nimport SignedOutStack from './signed-out/Stack';\nimport {SafeAreaProvider} from 'react-native-safe-area-context';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {useAppSettings} from './components/AppSettings';\n\n/**\n * Types\n */\ntype User = FirebaseAuthTypes.User | null;\n\n/**\n * Contexts\n */\nexport const UserContext = createContext<User>(null);\n\nfunction App(): JSX.Element {\n  const [initializing, setInitializing] = useState(true);\n  const [listenUser, setListenUser] = useState(false);\n  const [user, setUser] = useState<User>(null);\n  const appSettings = useAppSettings();\n\n  /** Listen for auth state changes */\n  useEffect(() => {\n    const authListener = auth().onAuthStateChanged(result => {\n      setUser(result);\n      if (initializing && !listenUser) {\n        setInitializing(false);\n        setListenUser(true);\n      }\n    });\n\n    return () => {\n      if (authListener) {\n        authListener();\n      }\n    };\n  }, [initializing, listenUser]);\n\n  /** Listen for user changes */\n  useEffect(() => {\n    let userListener: () => void;\n\n    if (listenUser) {\n      // TODO @react-native-firebase/auth provides `onUserChanged` which is this and more.\n      // what else can we add and still be web-compatible?\n      userListener = auth().onIdTokenChanged(result => {\n        setUser(result);\n      });\n    }\n\n    return () => {\n      if (userListener) {\n        userListener();\n      }\n    };\n  }, [listenUser]);\n\n  if (initializing) {\n    let waiting = true;\n    setTimeout(() => {\n      waiting = false;\n    }, 1000);\n\n    return (\n      <View\n        style={[\n          styles.loadingContainer,\n          {backgroundColor: appSettings.currentTheme.colors.background},\n        ]}>\n        {!waiting && (\n          <Fragment>\n            <Headline\n              style={[\n                styles.padded,\n                {color: appSettings.currentTheme.colors.text},\n              ]}>\n              {appSettings.t('loading')}...\n            </Headline>\n            <ActivityIndicator\n              size={'large'}\n              theme={{\n                ...appSettings.currentTheme,\n                colors: {primary: appSettings.currentTheme.colors.accent},\n              }}\n            />\n          </Fragment>\n        )}\n      </View>\n    );\n  }\n\n  function container(children: ReactNode | ReactNode[]) {\n    return (\n      <SafeAreaProvider>\n        <PaperProvider theme={appSettings.currentTheme}>\n          <NavigationContainer\n            linking={{\n              prefixes: [\n                'invertase.github.io/react-native-firebase-authenticationi-example',\n                'localhost',\n              ],\n              config: {\n                screens: {\n                  Details: 'details',\n                  UserProfile: 'user/profile',\n                  CreateAccount: 'account/create',\n                  ForgotPassword: 'password/forgot',\n                  PhoneSignIn: 'sign-in/phone',\n                  // Used as catch-all - there is a \"Home\" in signed-in and signed-out stacks!\n                  home: '*',\n                },\n              },\n            }}\n            documentTitle={{\n              formatter: (options, route) =>\n                `${appJson.displayName} - ${options?.title ?? route?.name}`,\n            }}\n            theme={appSettings.currentTheme}>\n            {children}\n          </NavigationContainer>\n        </PaperProvider>\n      </SafeAreaProvider>\n    );\n  }\n\n  return container(\n    user ? (\n      <UserContext.Provider value={user}>\n        <SignedInStack />\n      </UserContext.Provider>\n    ) : (\n      <SignedOutStack />\n    ),\n  );\n}\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignContent: 'center',\n    // alignSelf: 'center',\n    alignItems: 'center',\n    // textAlignVertical: true,\n  },\n  padded: {\n    padding: 40,\n  },\n});\n\nexport default App;\n"],"sourceRoot":""}